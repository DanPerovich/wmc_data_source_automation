name: Create WireMock Data Source from CSV
on:
  push:
    paths:
      - 'data/**'

env:
  WIREMOCK_CLOUD_API_TOKEN: ${{ secrets.WIREMOCK_CLOUD_API_TOKEN }}
  USER_ID: ${{ secrets.WIREMOCK_USER_ID }}

jobs:
  create-datasource:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Find New CSV Files
        id: find-csv
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            # Check if there's a previous commit.  This handles the initial commit case.
            if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
              base_sha=$(git rev-parse HEAD^1)
            else
              echo "No previous commit found (initial commit). Using current SHA."
              base_sha=$GITHUB_SHA # or any other default behavior you want
            fi
          elif [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then  # Handle pull requests
            base_sha=$GITHUB_BASE_REF # Use the base branch for PRs
          else
              base_sha=$GITHUB_SHA # For other events, use the current SHA
          fi

          added_files=$(git diff --name-only --diff-filter=A $base_sha $GITHUB_SHA)
          
          # Find the first CSV file in the data directory
          new_csv=$(echo "$added_files" | grep '^data/.*\.csv$' | head -1)
          
          if [ -z "$new_csv" ]; then
            echo "No new CSV files found"
            exit 1
          fi
          
          echo "CSV_PATH=$new_csv" >> $GITHUB_ENV
          echo "CSV_FILENAME=$(basename "$new_csv" .csv)" >> $GITHUB_ENV
          echo "Found new CSV file: $new_csv"

      - name: Parse CSV File
        run: |
          parsed_response=$(curl -X POST \
            -H "Authorization: Token $WIREMOCK_CLOUD_API_TOKEN" \
            -H "Content-Type: text/csv" \
            --data-binary "@$CSV_PATH" \
            https://api.wiremock.cloud/v1/data-sources/parse)
          
          if [ $? -ne 0 ]; then
            echo "Failed to parse CSV file"
            exit 1
          fi
          
          # Modify parsed_response to include name and type
          modified_response=$(echo "$parsed_response" | jq -c '.dataSource.name="'"$CSV_FILENAME"'" | .dataSource.type="CSV" | {dataSource: .dataSource}')

          #echo "modified_response= $modified_response"
          echo "PARSED_DATA=$(echo "$modified_response" | tr -d '\n')" >> "$GITHUB_ENV"

          echo "Successfully parsed CSV file"
          echo "$PARSED_DATA"

      - name: Create Data Source
        run: |
          response=$(curl -X POST \
            -H "Authorization: Token $WIREMOCK_CLOUD_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PARSED_DATA" \
            "https://api.wiremock.cloud/v1/users/${USER_ID}/data-sources")
          
          echo "DATA_SOURCE_ID=$(echo $response | jq -r '.id')" >> $GITHUB_ENV
          
          if [ -z "$DATA_SOURCE_ID" ] || [ "$DATA_SOURCE_ID" = "null" ]; then
            echo "Failed to create data source. Response: $response"
            exit 1
          fi
          
          echo "Successfully created data source with ID: $DATA_SOURCE_ID"

      - name: Output Results
        run: |
          echo "Data Source ID: $DATA_SOURCE_ID"
