name: Create WireMock Data Source from CSV
on:
  push:
    paths:
      - 'data/**'

env:
  WIREMOCK_CLOUD_API_TOKEN: ${{ secrets.WIREMOCK_CLOUD_API_TOKEN }}
  USER_ID: ${{ secrets.WIREMOCK_USER_ID }}

jobs:
  create-datasource:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Find New CSV Files
        id: find-csv
        run: |
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            if git rev-parse --verify HEAD^1 >/dev/null 2>&1; then
              base_sha=$(git rev-parse HEAD^1)
            else
              echo "No previous commit found (initial commit). Using current SHA."
              base_sha=$(git rev-parse HEAD) # Use HEAD for initial commit
            fi
          elif [[ $GITHUB_EVENT_NAME == 'pull_request' ]]; then
            base_sha=$GITHUB_BASE_REF
          else
            base_sha=$GITHUB_SHA
          fi

          data_dir="data"
          new_csv="" # Initialize new_csv to an empty string

          if [[ -d "$data_dir" ]]; then
            # Check if the data directory exists within the commit being checked
            if git ls-tree "$base_sha:$data_dir" > /dev/null 2>&1; then # Check if data_dir exists in base_sha
              git diff --name-only -z --diff-filter=A "$base_sha" "$GITHUB_SHA" -- "$data_dir" | while IFS= read -r -d $'\0' file; do
                if [[ "$file" == *.csv ]]; then
                  new_csv="$file"
                  break
                fi
              done
            else
              # If data_dir doesn't exist in base_sha, it's a new directory, check current commit
              git ls-tree "$GITHUB_SHA:$data_dir" > /dev/null 2>&1 && \
                find "$data_dir" -name "*.csv" -print0 | while IFS= read -r -d $'\0' file; do
                  new_csv="$file"
                  break
                done
            fi
          else
            echo "Data directory '$data_dir' not found."
            exit 0
          fi

          if [ -z "$new_csv" ]; then
            echo "No new CSV files found in '$data_dir'."
            exit 0
          fi

          echo "CSV_PATH=$new_csv" >> $GITHUB_ENV
          echo "CSV_FILENAME=$(basename "$new_csv" .csv)" >> $GITHUB_ENV
          echo "Found new CSV file: $(basename "$new_csv" .csv)"

      - name: Parse CSV File
        run: |
          parsed_response=$(curl -X POST \
            -H "Authorization: Token $WIREMOCK_CLOUD_API_TOKEN" \
            -H "Content-Type: text/csv" \
            --data-binary "@$CSV_PATH" \
            https://api.wiremock.cloud/v1/data-sources/parse)
          
          if [ $? -ne 0 ]; then
            echo "Failed to parse CSV file"
            exit 1
          fi
          
          # Modify parsed_response to include name and type
          modified_response=$(echo "$parsed_response" | jq -c '.dataSource.name="'"$CSV_FILENAME"'" | .dataSource.type="CSV" | {dataSource: .dataSource}')

          echo "PARSED_DATA=$(echo "$modified_response" | tr -d '\n')" >> "$GITHUB_ENV"
          echo "Successfully parsed CSV file"

      - name: Create Data Source
        run: |
          response=$(curl -X POST \
            -H "Authorization: Token $WIREMOCK_CLOUD_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PARSED_DATA" \
            "https://api.wiremock.cloud/v1/users/${USER_ID}/data-sources")
          
          #echo "DATA_SOURCE_ID=$(echo $response | jq -r '.dataSource.id')" >> $GITHUB_ENV
          #echo "DATA_SOURCE_ID=$(echo $response | jq -r '.dataSource.id')"
          
          #if [ -z "$DATA_SOURCE_ID" ] || [ "$DATA_SOURCE_ID" = "null" ]; then
          #  echo "Failed to create data source. Response: $response"
          #  exit 1
          #fi

          echo "DATA_SOURCE_ID=$(echo "$response" | jq -r '.dataSource.id' | tr -d '[:space:]')" >> $GITHUB_ENV

          if [ $? -ne 0 ]; then
            echo "Failed to extract data source ID with jq"
            echo "Raw response: $response"
            exit 1
          fi

          if [ -z "$DATA_SOURCE_ID" ] || [ "$DATA_SOURCE_ID" = "null" ]; then
            echo "Failed to create data source. Response: $response"
            exit 1
          fi
          
          echo "Successfully created data source with ID: $DATA_SOURCE_ID"

      - name: Output Results
        run: |
          #echo "Data Source ID: $DATA_SOURCE_ID"
          echo "Done"
